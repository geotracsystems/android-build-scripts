// GEOTrac Android build script helpers

def getGitHash()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }

    return stdout.toString().trim()
}

def getGitBranch()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }

    return stdout.toString().trim()
}

def getGitTag()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tag'
        standardOutput = stdout

        // Ignore errors
        errorOutput = new ByteArrayOutputStream()
        ignoreExitValue true
    }

    return stdout.toString().trim()
}

def getGitDirty()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'status', '-s'
        standardOutput = stdout
    }

    return !stdout.toString().trim().isEmpty()
}

def determineBuildType(String branch, String tag)
{
    if(branch.startsWith("version/") && tag.startsWith("beta/"))
    {
        return "beta"
    }
    else if(branch.startsWith("version/") && tag.startsWith("release/"))
    {
        return "release"
    }
    else
    {
        return "dev"
    }
}

def generateVersionName(String version, String commitHash, String buildType, int betaNumber, Boolean isDirty)
{
    def versionName = version + "-" + buildType

    if(buildType.equals("beta"))
    {
        versionName += betaNumber
    }

    versionName += "-" + commitHash.substring(0, 7)

    return isDirty ? versionName + "-dirty" : versionName
}

def getVersionName(String version, int betaNumber)
{
    def versionPropsFile = file('version.properties')

    if(!versionPropsFile.exists())
    {
        def buildType = determineBuildType(getGitBranch(), getGitTag());

        return generateVersionName(version, getGitHash(), buildType, betaNumber, getGitDirty())
    }

    if(versionPropsFile.canRead())
    {
        def Properties versionProps = new Properties()

        // Load the properties, and then release the file handle
        def versionFileStream = new FileInputStream(versionPropsFile)
        versionProps.load(versionFileStream)
        versionFileStream.close()

        def hash = versionProps['git.commit'].toString().trim()
        def buildType = versionProps['build.type'].toString().trim()

        return generateVersionName(version, hash, buildType, betaNumber, false)
    }
    else
    {
        throw new GradleException("Could not read version.properties!")
    }
}

def getVersionCode(int defaultCode)
{
    def versionPropsFile = file('version.properties')

    if(!versionPropsFile.exists())
    {
        return defaultCode
    }

    if(versionPropsFile.canRead())
    {
        def Properties versionProps = new Properties()

        // Load the properties, and then release the file handle
        def versionFileStream = new FileInputStream(versionPropsFile)
        versionProps.load(versionFileStream)
        versionFileStream.close()

        def String buildNumber = versionProps['build.number']

        return (buildNumber == null || buildNumber == "") ? defaultCode : Integer.parseInt(buildNumber)
    }
    else
    {
        throw new GradleException("Could not read version.properties!")
    }
}

// Export methods by turning them into closures
ext {
    getVersionCode = this.&getVersionCode
    getVersionName = this.&getVersionName
    getGitHash = this.&getGitHash
    getGitBranch = this.&getGitBranch
    getGitTag = this.&getGitTag
}
