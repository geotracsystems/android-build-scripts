// GEOTrac Android build script helpers

enum BuildType {
    DEVELOPMENT("dev"), BETA("beta"), RELEASE("release")

    BuildType(String displayName) { this.displayName = displayName }
    private final String displayName;
    public String toString() { return displayName }
    
    public static fromBranch(String branch) {
        // We use git flow - http://nvie.com/posts/a-successful-git-branching-model/
        // The defaults use release/, hotfix/, etc instead of release- and hotfix- mentioned above
        if(branch.equals("master"))
        {
            //Our only releases are on master
            return BuildType.RELEASE
        }
        else if(branch.startsWith("release/") || branch.startsWith("hotfix/"))
        {
            //Both releases and hotfixes are prereleases - a new version that will show up as a full release later
            return BuildType.BETA
        }
        else
        {
            return BuildType.DEVELOPMENT
        }
    }
}

project.ext.serverPropertiesFile = file('version.properties')

Boolean isBuildServer()
{
    return project.serverPropertiesFile.exists()
}

//The build server writes some data to a file that we can make use of
String getBuildServerProperty(String key)
{
    if(!project.serverPropertiesFile.canRead())
    {
        throw new GradleException("Could not read build server properties file " + project.serverPropertiesFile.toString())
    }

    def Properties serverProperties = new Properties()

    // Load the properties, and then release the file handle
    def versionFileStream = new FileInputStream(project.serverPropertiesFile)
    serverProperties.load(versionFileStream)
    versionFileStream.close()

    def value = serverProperties[key]?.trim()
    if(value == "") throw new GradleException(key + " is defined, but has an empty string!")

    return value
}

String getProperty(String key, Closure<String> funcToGetDefault)
{
    def serverValue = isBuildServer() ? getBuildServerProperty(key) : null

    return serverValue ?: funcToGetDefault.call()
}

String getGitHash()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }

    return stdout.toString().trim()
}

String getGitBranch()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }

    return stdout.toString().trim()
}

String getGitTag()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tag'
        standardOutput = stdout

        // Ignore errors
        errorOutput = new ByteArrayOutputStream()
        ignoreExitValue true
    }

    return stdout.toString().trim()
}

Boolean isGitDirty()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'status', '-s'
        standardOutput = stdout
    }

    return !stdout.toString().trim().isEmpty()
}

String generateVersionName(String version, String commitHash, BuildType buildType, Boolean isDirty)
{
    def versionName = version

    if(buildType != BuildType.RELEASE) {
        versionName += "-" + buildType.toString() + "-" + commitHash.substring(0, 7)
    }

    return isDirty ? versionName + "-dirty" : versionName
}

// Unused second parameter is because of old scripts using beta numbers
String getVersionName(String version, int unusedBetaNumber=0)
{
    def hash = getProperty('git.commit', { getGitHash() })
    def buildType = BuildType.fromBranch(getProperty('git.branch', { getGitBranch() }))

    return generateVersionName(version, hash, buildType, isBuildServer() ? false : isGitDirty())
}

int getVersionCode(int defaultCode)
{
    return Integer.parseInt(getProperty('build.number', { defaultCode }))
}

// Export methods by turning them into closures
ext {
    getVersionCode = this.&getVersionCode
    getVersionName = this.&getVersionName
    getGitHash = this.&getGitHash
    getGitBranch = this.&getGitBranch
    getGitTag = this.&getGitTag
}
